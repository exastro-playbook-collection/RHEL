---
# not check `COMPLIANCE020201` by ansible-lint
  - name: set password validity period
    block:
      # - name: set parm tmp
        # set_fact:
          # VAR_RH_pw_validity_period_tmp:
            # isDict: false

      # - name: update VAR_RH_pw_validity_period_tmp
        # set_fact:
          # VAR_RH_pw_validity_period_tmp: "{{ VAR_RH_pw_validity_period }}"
        # when: VAR_RH_pw_validity_period is mapping

      # - name: debug warning msg
        # debug:
          # msg: " Parameter {{ item.key }} is null or not a number."
        # when: "(item.key == 'isDict' ) or (item.value is none) or (item.value is not number)"
        # with_dict: "{{ VAR_RH_pw_validity_period_tmp }}"

      - name: check VAR_RH_pw_validity_period param 1 PASS_MAX_DAYS
        lineinfile:
          path: /etc/login.defs
          regexp: '^PASS_MAX_DAYS'
          line: 'PASS_MAX_DAYS  {{ VAR_RH_pw_validity_period.pass_max_days }}'
        when:
          - VAR_RH_pw_validity_period.pass_max_days is defined
          - VAR_RH_pw_validity_period.pass_max_days is not none
          - VAR_RH_pw_validity_period.pass_max_days is number

      - name: check VAR_RH_pw_validity_period param 2 PASS_MIN_DAYS
        lineinfile:
          path: /etc/login.defs
          regexp: '^PASS_MIN_DAYS'
          line: 'PASS_MIN_DAYS  {{ VAR_RH_pw_validity_period.pass_min_days }}'
        when:
          - VAR_RH_pw_validity_period.pass_min_days is defined
          - VAR_RH_pw_validity_period.pass_min_days is not none
          - VAR_RH_pw_validity_period.pass_min_days is number

      - name: check VAR_RH_pw_validity_period param 3 PASS_WARN_AGE
        lineinfile:
          path: /etc/login.defs
          regexp: '^PASS_WARN_AGE'
          line: 'PASS_WARN_AGE  {{ VAR_RH_pw_validity_period.pass_warn_age }}'
        when:
          - VAR_RH_pw_validity_period.pass_warn_age is defined
          - VAR_RH_pw_validity_period.pass_warn_age is not none
          - VAR_RH_pw_validity_period.pass_warn_age is number
    when: VAR_RH_pw_validity_period is defined


  - name: Initialization module string
    set_fact:
      pwquality_param: "password    "
      unix_param: "password    "

  - name: Initialize the flag of 3 module
    set_fact:
      quality_infile: false
      unix_infile: false
      other_infile: false

  - name: get system-auth file content
    command: "cat /etc/pam.d/system-auth"
    register: system_auth
    changed_when: system_auth.rc != 0

  - name: check pam_pwquality.so exist
    set_fact:
      quality_infile: true
    when:
      - "'password' in item"
      - "'pam_pwquality.so' in item"
    with_items: "{{ system_auth.stdout_lines }}"

  - name: check unix.so is exist
    set_fact:
      unix_infile: true
    when:
      - "'password' in item"
      - "'unix.so' in item"
    with_items: "{{ system_auth.stdout_lines }}"

  - name: check other module exist
    set_fact:
      other_infile: true
    when:
      - "'password' in item"
      - "'.so' in item"
    with_items: "{{ system_auth.stdout_lines }}"

  - name: set pam_pwquality module
    block:
      - name: set VAR_RH_pw_quality_flag
        set_fact:
          pwquality_param: "{{ [pwquality_param,VAR_RH_pw_quality_flag,'     pam_pwquality.so'] | join(' ')}}"

      - name: set VAR_RH_pw_quality_arg1
        set_fact:
          pwquality_param: "{{ [pwquality_param,item,' '] | join(' ')}}"
        with_items: "{{ VAR_RH_pw_quality_arg1 }}"
        when:
          - VAR_RH_pw_quality_arg1 is defined
          - VAR_RH_pw_quality_arg1 is not none

      - name: set VAR_RH_pw_quality_arg2_tmp
        set_fact:
          VAR_RH_pw_quality_arg2_tmp:
            isDict: false

      - name: set VAR_RH_pw_quality_arg2
        block:
          # - name: debug VAR_RH_pw_quality_arg2 warning msg
            # debug:
              # msg: " Parameter VAR_RH_pw_quality_arg2 is not mapping."
            # when: VAR_RH_pw_quality_arg2 is not mapping

          - name: update VAR_RH_pw_quality_arg2
            set_fact:
              VAR_RH_pw_quality_arg2_tmp: "{{ VAR_RH_pw_quality_arg2 }}"
            when: VAR_RH_pw_quality_arg2 is mapping

          - name: VAR_RH_pw_quality_arg2 is dict
            set_fact:
              pwquality_param: "{{ [pwquality_param,' ',item.key,'=',item.value,' '] | join('') }}"
            with_dict: "{{ VAR_RH_pw_quality_arg2_tmp }}"
            when: "item.key != 'isDict'"
            # loop: "{{ lookup('dict', VAR_RH_pw_quality_arg2_tmp) }}"
        when: VAR_RH_pw_quality_arg2 is defined
      # - name: set VAR_RH_pw_quality_arg2
        # set_fact:
          # pwquality_param: "{{ [pwquality_param,' ',item.key,'=',item.value,' '] | join('') }}"
        # with_dict: "{{ VAR_RH_pw_quality_arg2 }}"
        # when:
          # - VAR_RH_pw_quality_arg2 is defined
          # - VAR_RH_pw_quality_arg2 is not none

      - name: pam_pwquality.so exist
        lineinfile:
          path: /etc/pam.d/system-auth
          regexp: 'password(.*)pam_pwquality.so'
          line: "{{ pwquality_param }}"
        when: quality_infile == true

      - name: pam_pwquality.so not exist and unix.so exist
        lineinfile:
          path: /etc/pam.d/system-auth
          insertbefore: 'password(.*)unix.so'
          line: "{{ pwquality_param }}"
        when:
          - quality_infile == false
          - unix_infile == true

      - name: pam_pwquality.so not exist and unix.so not exist and other module exist
        lineinfile:
          path: /etc/pam.d/system-auth
          insertbefore: 'password(.*).so'
          firstmatch: yes
          line: "{{ pwquality_param }}"
        when:
          - quality_infile == false
          - unix_infile == false
          - other_infile == true

      - name: pam_pwquality.so not exist and unix.so not exist and other module not exist
        lineinfile:
          path: /etc/pam.d/system-auth
          line: "{{ pwquality_param }}"
        when:
          - quality_infile == false
          - unix_infile == false
          - other_infile == false

      - name: update quality flag
        set_fact:
          quality_infile: true

    when: VAR_RH_pw_quality_flag is defined and VAR_RH_pw_quality_flag is not none

  - name: set pam_unix.so
    block:
      - name: set VAR_RH_pw_authentication_flag
        set_fact:
          unix_param: "{{ [unix_param,VAR_RH_pw_authentication_flag,'     pam_unix.so'] | join(' ')}}"

      - name: set VAR_RH_pw_authentication_arg1
        set_fact:
          unix_param: "{{ [unix_param,item,' '] | join(' ')}}"
        with_items: "{{ VAR_RH_pw_authentication_arg1 }}"
        when:
          - VAR_RH_pw_authentication_arg1 is defined
          - VAR_RH_pw_authentication_arg1 is not none

      - name: set VAR_RH_pw_authentication_arg2_tmp
        set_fact:
          VAR_RH_pw_authentication_arg2_tmp:
            isDict: false

      - name: set VAR_RH_pw_authentication_arg2
        block:
          # - name: debug VAR_RH_pw_authentication_arg2 warning msg
            # debug:
              # msg:  " Parameter VAR_RH_pw_authentication_arg2 is not mapping."
            # when: VAR_RH_pw_authentication_arg2 is not mapping

          - name: update VAR_RH_pw_authentication_arg2_tmp
            set_fact:
              VAR_RH_pw_authentication_arg2_tmp:  "{{ VAR_RH_pw_authentication_arg2 }}"
            when: VAR_RH_pw_authentication_arg2 is mapping

          - name: VAR_RH_pw_authentication_arg2 is dict
            set_fact:
              unix_param: "{{ [unix_param,' ',item.key,'=',item.value,' '] | join('') }}"
            with_dict: "{{ VAR_RH_pw_authentication_arg2_tmp }}"
            when: "item.key != 'isDict'"
            # loop: "{{ lookup('dict', VAR_RH_pw_authentication_arg2_tmp,wantlist=True) }}"
        when: VAR_RH_pw_authentication_arg2 is defined
      # - name: set VAR_RH_pw_authentication_arg2
        # set_fact:
          # unix_param: "{{ [unix_param,' ',item.key,'=',item.value,' '] | join('') }}"
        # with_dict: "{{ VAR_RH_pw_authentication_arg2 }}"
        # when:
          # - VAR_RH_pw_authentication_arg2 is defined
          # - VAR_RH_pw_authentication_arg2 is not none

      - name: pam_unix.so exist
        lineinfile:
          path: /etc/pam.d/system-auth
          regexp: 'password(.*)pam_unix.so'
          line: "{{ unix_param }}"
        when: unix_infile == true

      - name: pam_unix.so not exist and pam_pwquality.so exist
        lineinfile:
          path: /etc/pam.d/system-auth
          insertafter: 'password(.*)pam_pwquality.so'
          line: "{{ unix_param }}"
        when:
          - unix_infile == false
          - quality_infile == true

      - name: pam_unix.so not exist and pam_pwquality not exist and other module exist
        lineinfile:
          path: /etc/pam.d/system-auth
          insertbefore: 'password(.*).so'
          firstmatch: yes
          line: "{{ unix_param }}"
        when:
          - unix_infile == false
          - quality_infile == false
          - other_infile == true

      - name: pam_unix.so not exist and pam_pwquality.so not exist and other module not exist
        lineinfile:
          path: /etc/pam.d/system-auth
          line: "{{ unix_param }}"
        when:
          - unix_infile == false
          - quality_infile == false
          - other_infile == false

    when: VAR_RH_pw_authentication_flag is defined and VAR_RH_pw_authentication_flag is not none

